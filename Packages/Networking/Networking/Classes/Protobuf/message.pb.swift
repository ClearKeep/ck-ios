// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Message_MessageObjectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var groupID: Int64 = 0

  public var groupType: String = String()

  public var fromClientID: String = String()

  public var fromClientWorkspaceDomain: String = String()

  public var clientID: String = String()

  public var clientWorkspaceDomain: String = String()

  public var message: Data = Data()

  public var lstClientRead: [Message_ClientReadObject] = []

  public var createdAt: Int64 = 0

  public var updatedAt: Int64 = 0

  public var senderMessage: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Message_ClientReadObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var avatar: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Message_BaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: get list message group
public struct Message_GetMessagesInGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  ///0
  public var offSet: Int32 = 0

  ///8746529349
  public var lastMessageAt: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: get list message group for workspace requesting
public struct Message_WorkspaceGetMessagesInGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  ///0
  public var offSet: Int32 = 0

  ///8746529349
  public var lastMessageAt: Int64 = 0

  /// only for workspace request
  public var clientID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response: GetMessagesInGroupResponse
public struct Message_GetMessagesInGroupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lstMessage: [Message_MessageObjectResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// ----- PUBLISH AND SUBCRIBE MESSAGE -----
/// Request: publish a message
/// need to add new message encrypted with own public key so it could be decrypted by own private key
public struct Message_PublishRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromClientDeviceID: String = String()

  public var clientID: String = String()

  public var groupID: Int64 = 0

  public var message: Data = Data()

  public var senderMessage: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///response: BaseResponse
/// need to add new message encrypted with own public key -> could be decrypted by own private key
public struct Message_WorkspacePublishRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromClientID: String = String()

  public var fromClientWorkspaceDomain: String = String()

  public var clientID: String = String()

  public var groupID: Int64 = 0

  public var groupType: String = String()

  public var messageID: String = String()

  public var message: Data = Data()

  public var createdAt: Int64 = 0

  public var updatedAt: Int64 = 0

  public var senderMessage: Data = Data()

  public var fromClientDeviceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: subcribe
public struct Message_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: un-subcribe
public struct Message_UnSubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: listen
public struct Message_ListenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: read message
public struct Message_ReadMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lstMessageID: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Message_EditMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromClientID: String = String()

  public var clientID: String = String()

  public var groupID: Int64 = 0

  public var groupType: String = String()

  public var message: Data = Data()

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "message"

extension Message_MessageObjectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageObjectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "group_type"),
    4: .standard(proto: "from_client_id"),
    5: .standard(proto: "from_client_workspace_domain"),
    6: .standard(proto: "client_id"),
    7: .standard(proto: "client_workspace_domain"),
    8: .same(proto: "message"),
    9: .standard(proto: "lst_client_read"),
    10: .standard(proto: "created_at"),
    11: .standard(proto: "updated_at"),
    12: .standard(proto: "sender_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fromClientID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fromClientWorkspaceDomain) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.clientWorkspaceDomain) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.lstClientRead) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.updatedAt) }()
      case 12: try { try decoder.decodeSingularBytesField(value: &self.senderMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 3)
    }
    if !self.fromClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientID, fieldNumber: 4)
    }
    if !self.fromClientWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientWorkspaceDomain, fieldNumber: 5)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 6)
    }
    if !self.clientWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.clientWorkspaceDomain, fieldNumber: 7)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 8)
    }
    if !self.lstClientRead.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstClientRead, fieldNumber: 9)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 10)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 11)
    }
    if !self.senderMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderMessage, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_MessageObjectResponse, rhs: Message_MessageObjectResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.fromClientID != rhs.fromClientID {return false}
    if lhs.fromClientWorkspaceDomain != rhs.fromClientWorkspaceDomain {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientWorkspaceDomain != rhs.clientWorkspaceDomain {return false}
    if lhs.message != rhs.message {return false}
    if lhs.lstClientRead != rhs.lstClientRead {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.senderMessage != rhs.senderMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_ClientReadObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientReadObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "avatar"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_ClientReadObject, rhs: Message_ClientReadObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_BaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_BaseResponse, rhs: Message_BaseResponse) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_GetMessagesInGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMessagesInGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "off_set"),
    3: .standard(proto: "last_message_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.offSet) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastMessageAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.offSet != 0 {
      try visitor.visitSingularInt32Field(value: self.offSet, fieldNumber: 2)
    }
    if self.lastMessageAt != 0 {
      try visitor.visitSingularInt64Field(value: self.lastMessageAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_GetMessagesInGroupRequest, rhs: Message_GetMessagesInGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.offSet != rhs.offSet {return false}
    if lhs.lastMessageAt != rhs.lastMessageAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_WorkspaceGetMessagesInGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkspaceGetMessagesInGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "off_set"),
    3: .standard(proto: "last_message_at"),
    4: .standard(proto: "client_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.offSet) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastMessageAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.offSet != 0 {
      try visitor.visitSingularInt32Field(value: self.offSet, fieldNumber: 2)
    }
    if self.lastMessageAt != 0 {
      try visitor.visitSingularInt64Field(value: self.lastMessageAt, fieldNumber: 3)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_WorkspaceGetMessagesInGroupRequest, rhs: Message_WorkspaceGetMessagesInGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.offSet != rhs.offSet {return false}
    if lhs.lastMessageAt != rhs.lastMessageAt {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_GetMessagesInGroupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMessagesInGroupResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lst_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.lstMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lstMessage.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_GetMessagesInGroupResponse, rhs: Message_GetMessagesInGroupResponse) -> Bool {
    if lhs.lstMessage != rhs.lstMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_PublishRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublishRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_client_device_id"),
    2: .same(proto: "clientId"),
    3: .same(proto: "groupId"),
    4: .same(proto: "message"),
    5: .standard(proto: "sender_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromClientDeviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.senderMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromClientDeviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientDeviceID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 3)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 4)
    }
    if !self.senderMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderMessage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_PublishRequest, rhs: Message_PublishRequest) -> Bool {
    if lhs.fromClientDeviceID != rhs.fromClientDeviceID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.senderMessage != rhs.senderMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_WorkspacePublishRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkspacePublishRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_client_id"),
    2: .standard(proto: "from_client_workspace_domain"),
    3: .standard(proto: "client_id"),
    4: .standard(proto: "group_id"),
    5: .standard(proto: "group_type"),
    6: .standard(proto: "message_id"),
    7: .same(proto: "message"),
    8: .standard(proto: "created_at"),
    9: .standard(proto: "updated_at"),
    10: .standard(proto: "sender_message"),
    11: .standard(proto: "from_client_device_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromClientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fromClientWorkspaceDomain) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.senderMessage) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.fromClientDeviceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientID, fieldNumber: 1)
    }
    if !self.fromClientWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientWorkspaceDomain, fieldNumber: 2)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 3)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 4)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 5)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 6)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 7)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 8)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 9)
    }
    if !self.senderMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderMessage, fieldNumber: 10)
    }
    if !self.fromClientDeviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientDeviceID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_WorkspacePublishRequest, rhs: Message_WorkspacePublishRequest) -> Bool {
    if lhs.fromClientID != rhs.fromClientID {return false}
    if lhs.fromClientWorkspaceDomain != rhs.fromClientWorkspaceDomain {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.senderMessage != rhs.senderMessage {return false}
    if lhs.fromClientDeviceID != rhs.fromClientDeviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_SubscribeRequest, rhs: Message_SubscribeRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_UnSubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnSubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_UnSubscribeRequest, rhs: Message_UnSubscribeRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_ListenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListenRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_ListenRequest, rhs: Message_ListenRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_ReadMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReadMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "lst_message_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.lstMessageID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lstMessageID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lstMessageID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_ReadMessagesRequest, rhs: Message_ReadMessagesRequest) -> Bool {
    if lhs.lstMessageID != rhs.lstMessageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message_EditMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EditMessageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fromClientId"),
    2: .same(proto: "clientId"),
    3: .same(proto: "groupId"),
    4: .same(proto: "groupType"),
    5: .same(proto: "message"),
    6: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromClientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 3)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Message_EditMessageRequest, rhs: Message_EditMessageRequest) -> Bool {
    if lhs.fromClientID != rhs.fromClientID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.message != rhs.message {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
