//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: find_user_by_email.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `FindUserByEmail_FindUserByEmailServiceClient`, then call methods of this protocol to make API calls.
internal protocol FindUserByEmail_FindUserByEmailServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? { get }

  func push_email_hash(
    _ request: FindUserByEmail_PushEmailHashRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse>

  func get_server_from_email_hash(
    _ request: FindUserByEmail_GetServerFromEmailHashRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse>
}

extension FindUserByEmail_FindUserByEmailServiceClientProtocol {
  internal var serviceName: String {
    return "find_user_by_email.FindUserByEmailService"
  }

  /// Unary call to push_email_hash
  ///
  /// - Parameters:
  ///   - request: Request to send to push_email_hash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func push_email_hash(
    _ request: FindUserByEmail_PushEmailHashRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse> {
    return self.makeUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.push_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepush_email_hashInterceptors() ?? []
    )
  }

  /// Unary call to get_server_from_email_hash
  ///
  /// - Parameters:
  ///   - request: Request to send to get_server_from_email_hash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_server_from_email_hash(
    _ request: FindUserByEmail_GetServerFromEmailHashRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse> {
    return self.makeUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.get_server_from_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_server_from_email_hashInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension FindUserByEmail_FindUserByEmailServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "FindUserByEmail_FindUserByEmailServiceNIOClient")
internal final class FindUserByEmail_FindUserByEmailServiceClient: FindUserByEmail_FindUserByEmailServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the find_user_by_email.FindUserByEmailService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct FindUserByEmail_FindUserByEmailServiceNIOClient: FindUserByEmail_FindUserByEmailServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the find_user_by_email.FindUserByEmailService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol FindUserByEmail_FindUserByEmailServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? { get }

  func makePushEmailHashCall(
    _ request: FindUserByEmail_PushEmailHashRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse>

  func makeGetServerFromEmailHashCall(
    _ request: FindUserByEmail_GetServerFromEmailHashRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FindUserByEmail_FindUserByEmailServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return FindUserByEmail_FindUserByEmailServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makePushEmailHashCall(
    _ request: FindUserByEmail_PushEmailHashRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse> {
    return self.makeAsyncUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.push_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepush_email_hashInterceptors() ?? []
    )
  }

  internal func makeGetServerFromEmailHashCall(
    _ request: FindUserByEmail_GetServerFromEmailHashRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse> {
    return self.makeAsyncUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.get_server_from_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_server_from_email_hashInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FindUserByEmail_FindUserByEmailServiceAsyncClientProtocol {
  internal func push_email_hash(
    _ request: FindUserByEmail_PushEmailHashRequest,
    callOptions: CallOptions? = nil
  ) async throws -> FindUserByEmail_PushEmailHashResponse {
    return try await self.performAsyncUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.push_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepush_email_hashInterceptors() ?? []
    )
  }

  internal func get_server_from_email_hash(
    _ request: FindUserByEmail_GetServerFromEmailHashRequest,
    callOptions: CallOptions? = nil
  ) async throws -> FindUserByEmail_GetServerFromEmailHashResponse {
    return try await self.performAsyncUnaryCall(
      path: FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.get_server_from_email_hash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_server_from_email_hashInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct FindUserByEmail_FindUserByEmailServiceAsyncClient: FindUserByEmail_FindUserByEmailServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol FindUserByEmail_FindUserByEmailServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'push_email_hash'.
  func makepush_email_hashInterceptors() -> [ClientInterceptor<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse>]

  /// - Returns: Interceptors to use when invoking 'get_server_from_email_hash'.
  func makeget_server_from_email_hashInterceptors() -> [ClientInterceptor<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse>]
}

internal enum FindUserByEmail_FindUserByEmailServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FindUserByEmailService",
    fullName: "find_user_by_email.FindUserByEmailService",
    methods: [
      FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.push_email_hash,
      FindUserByEmail_FindUserByEmailServiceClientMetadata.Methods.get_server_from_email_hash,
    ]
  )

  internal enum Methods {
    internal static let push_email_hash = GRPCMethodDescriptor(
      name: "push_email_hash",
      path: "/find_user_by_email.FindUserByEmailService/push_email_hash",
      type: GRPCCallType.unary
    )

    internal static let get_server_from_email_hash = GRPCMethodDescriptor(
      name: "get_server_from_email_hash",
      path: "/find_user_by_email.FindUserByEmailService/get_server_from_email_hash",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol FindUserByEmail_FindUserByEmailServiceProvider: CallHandlerProvider {
  var interceptors: FindUserByEmail_FindUserByEmailServiceServerInterceptorFactoryProtocol? { get }

  func push_email_hash(request: FindUserByEmail_PushEmailHashRequest, context: StatusOnlyCallContext) -> EventLoopFuture<FindUserByEmail_PushEmailHashResponse>

  func get_server_from_email_hash(request: FindUserByEmail_GetServerFromEmailHashRequest, context: StatusOnlyCallContext) -> EventLoopFuture<FindUserByEmail_GetServerFromEmailHashResponse>
}

extension FindUserByEmail_FindUserByEmailServiceProvider {
  internal var serviceName: Substring {
    return FindUserByEmail_FindUserByEmailServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "push_email_hash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FindUserByEmail_PushEmailHashRequest>(),
        responseSerializer: ProtobufSerializer<FindUserByEmail_PushEmailHashResponse>(),
        interceptors: self.interceptors?.makepush_email_hashInterceptors() ?? [],
        userFunction: self.push_email_hash(request:context:)
      )

    case "get_server_from_email_hash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FindUserByEmail_GetServerFromEmailHashRequest>(),
        responseSerializer: ProtobufSerializer<FindUserByEmail_GetServerFromEmailHashResponse>(),
        interceptors: self.interceptors?.makeget_server_from_email_hashInterceptors() ?? [],
        userFunction: self.get_server_from_email_hash(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol FindUserByEmail_FindUserByEmailServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FindUserByEmail_FindUserByEmailServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func push_email_hash(
    request: FindUserByEmail_PushEmailHashRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> FindUserByEmail_PushEmailHashResponse

  @Sendable func get_server_from_email_hash(
    request: FindUserByEmail_GetServerFromEmailHashRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> FindUserByEmail_GetServerFromEmailHashResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FindUserByEmail_FindUserByEmailServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return FindUserByEmail_FindUserByEmailServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return FindUserByEmail_FindUserByEmailServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: FindUserByEmail_FindUserByEmailServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "push_email_hash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FindUserByEmail_PushEmailHashRequest>(),
        responseSerializer: ProtobufSerializer<FindUserByEmail_PushEmailHashResponse>(),
        interceptors: self.interceptors?.makepush_email_hashInterceptors() ?? [],
        wrapping: self.push_email_hash(request:context:)
      )

    case "get_server_from_email_hash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FindUserByEmail_GetServerFromEmailHashRequest>(),
        responseSerializer: ProtobufSerializer<FindUserByEmail_GetServerFromEmailHashResponse>(),
        interceptors: self.interceptors?.makeget_server_from_email_hashInterceptors() ?? [],
        wrapping: self.get_server_from_email_hash(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol FindUserByEmail_FindUserByEmailServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'push_email_hash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepush_email_hashInterceptors() -> [ServerInterceptor<FindUserByEmail_PushEmailHashRequest, FindUserByEmail_PushEmailHashResponse>]

  /// - Returns: Interceptors to use when handling 'get_server_from_email_hash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_server_from_email_hashInterceptors() -> [ServerInterceptor<FindUserByEmail_GetServerFromEmailHashRequest, FindUserByEmail_GetServerFromEmailHashResponse>]
}

internal enum FindUserByEmail_FindUserByEmailServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "FindUserByEmailService",
    fullName: "find_user_by_email.FindUserByEmailService",
    methods: [
      FindUserByEmail_FindUserByEmailServiceServerMetadata.Methods.push_email_hash,
      FindUserByEmail_FindUserByEmailServiceServerMetadata.Methods.get_server_from_email_hash,
    ]
  )

  internal enum Methods {
    internal static let push_email_hash = GRPCMethodDescriptor(
      name: "push_email_hash",
      path: "/find_user_by_email.FindUserByEmailService/push_email_hash",
      type: GRPCCallType.unary
    )

    internal static let get_server_from_email_hash = GRPCMethodDescriptor(
      name: "get_server_from_email_hash",
      path: "/find_user_by_email.FindUserByEmailService/get_server_from_email_hash",
      type: GRPCCallType.unary
    )
  }
}
