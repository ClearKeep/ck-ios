// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Group_MessageObjectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var groupID: Int64 = 0

  public var groupType: String = String()

  public var fromClientID: String = String()

  public var clientID: String = String()

  public var message: Data = Data()

  public var lstClientRead: [Group_ClientReadObject] = []

  public var createdAt: Int64 = 0

  public var updatedAt: Int64 = 0

  public var senderMessage: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_ClientReadObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var avatar: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_ClientInGroupResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var workspaceDomain: String = String()

  public var status: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_GroupClientKeyObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var workspaceDomain: String = String()

  public var clientID: String = String()

  public var deviceID: Int32 = 0

  public var clientKeyDistribution: Data = Data()

  public var senderKeyID: Int64 = 0

  public var senderKey: Data = Data()

  public var publicKey: Data = Data()

  public var privateKey: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_GroupObjectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  public var groupName: String {
    get {return _storage._groupName}
    set {_uniqueStorage()._groupName = newValue}
  }

  public var groupAvatar: String {
    get {return _storage._groupAvatar}
    set {_uniqueStorage()._groupAvatar = newValue}
  }

  public var groupType: String {
    get {return _storage._groupType}
    set {_uniqueStorage()._groupType = newValue}
  }

  public var lstClient: [Group_ClientInGroupResponse] {
    get {return _storage._lstClient}
    set {_uniqueStorage()._lstClient = newValue}
  }

  public var lastMessageAt: Int64 {
    get {return _storage._lastMessageAt}
    set {_uniqueStorage()._lastMessageAt = newValue}
  }

  public var lastMessage: Group_MessageObjectResponse {
    get {return _storage._lastMessage ?? Group_MessageObjectResponse()}
    set {_uniqueStorage()._lastMessage = newValue}
  }
  /// Returns true if `lastMessage` has been explicitly set.
  public var hasLastMessage: Bool {return _storage._lastMessage != nil}
  /// Clears the value of `lastMessage`. Subsequent reads from it will return its default value.
  public mutating func clearLastMessage() {_uniqueStorage()._lastMessage = nil}

  public var createdByClientID: String {
    get {return _storage._createdByClientID}
    set {_uniqueStorage()._createdByClientID = newValue}
  }

  public var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var updatedByClientID: String {
    get {return _storage._updatedByClientID}
    set {_uniqueStorage()._updatedByClientID = newValue}
  }

  public var updatedAt: Int64 {
    get {return _storage._updatedAt}
    set {_uniqueStorage()._updatedAt = newValue}
  }

  public var groupRtcToken: String {
    get {return _storage._groupRtcToken}
    set {_uniqueStorage()._groupRtcToken = newValue}
  }

  public var hasUnreadMessage_p: Bool {
    get {return _storage._hasUnreadMessage_p}
    set {_uniqueStorage()._hasUnreadMessage_p = newValue}
  }

  public var clientKey: Group_GroupClientKeyObject {
    get {return _storage._clientKey ?? Group_GroupClientKeyObject()}
    set {_uniqueStorage()._clientKey = newValue}
  }
  /// Returns true if `clientKey` has been explicitly set.
  public var hasClientKey: Bool {return _storage._clientKey != nil}
  /// Clears the value of `clientKey`. Subsequent reads from it will return its default value.
  public mutating func clearClientKey() {_uniqueStorage()._clientKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Group_BaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: create group
public struct Group_ClientInGroupObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var workspaceDomain: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_CreateGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupName: String = String()

  public var groupType: String = String()

  public var createdByClientID: String = String()

  public var lstClient: [Group_ClientInGroupObject] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: update group
public struct Group_UpdateGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var groupName: String = String()

  public var groupAvatar: String = String()

  public var updatedByClientID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: get group
public struct Group_GetGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: get joined groups
public struct Group_GetJoinedGroupsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response
public struct Group_GetJoinedGroupsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lstGroup: [Group_GroupObjectResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: search groups
public struct Group_SearchGroupsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keyword: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response
public struct Group_SearchGroupsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lstGroup: [Group_GroupObjectResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: add member to group
public struct Group_MemberInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var displayName: String = String()

  public var workspaceDomain: String = String()

  public var status: String = String()

  public var refGroupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_AddMemberRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var addedMemberInfo: Group_MemberInfo {
    get {return _addedMemberInfo ?? Group_MemberInfo()}
    set {_addedMemberInfo = newValue}
  }
  /// Returns true if `addedMemberInfo` has been explicitly set.
  public var hasAddedMemberInfo: Bool {return self._addedMemberInfo != nil}
  /// Clears the value of `addedMemberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAddedMemberInfo() {self._addedMemberInfo = nil}

  public var addingMemberInfo: Group_MemberInfo {
    get {return _addingMemberInfo ?? Group_MemberInfo()}
    set {_addingMemberInfo = newValue}
  }
  /// Returns true if `addingMemberInfo` has been explicitly set.
  public var hasAddingMemberInfo: Bool {return self._addingMemberInfo != nil}
  /// Clears the value of `addingMemberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAddingMemberInfo() {self._addingMemberInfo = nil}

  public var groupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _addedMemberInfo: Group_MemberInfo? = nil
  fileprivate var _addingMemberInfo: Group_MemberInfo? = nil
}

/// Request: join group
public struct Group_JoinGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientID: String = String()

  public var groupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: CreateGroupWorkspaceRequest
public struct Group_CreateGroupWorkspaceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupName: String = String()

  public var groupType: String = String()

  public var fromClientID: String = String()

  public var clientID: String = String()

  public var lstClient: String = String()

  public var ownerGroupID: Int64 = 0

  public var ownerWorkspaceDomain: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_CreateGroupWorkspaceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var clientID: String = String()

  public var clientName: String = String()

  public var clientWorkspaceDomain: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Group_GroupInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groupID: Int64 = 0

  public var groupName: String = String()

  public var groupType: String = String()

  public var groupClients: String = String()

  public var groupWorkspaceDomain: String = String()

  public var createdBy: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: AddMemberWorkspaceRequest
public struct Group_AddMemberWorkspaceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var addedMemberInfo: Group_MemberInfo {
    get {return _addedMemberInfo ?? Group_MemberInfo()}
    set {_addedMemberInfo = newValue}
  }
  /// Returns true if `addedMemberInfo` has been explicitly set.
  public var hasAddedMemberInfo: Bool {return self._addedMemberInfo != nil}
  /// Clears the value of `addedMemberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAddedMemberInfo() {self._addedMemberInfo = nil}

  public var addingMemberInfo: Group_MemberInfo {
    get {return _addingMemberInfo ?? Group_MemberInfo()}
    set {_addingMemberInfo = newValue}
  }
  /// Returns true if `addingMemberInfo` has been explicitly set.
  public var hasAddingMemberInfo: Bool {return self._addingMemberInfo != nil}
  /// Clears the value of `addingMemberInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAddingMemberInfo() {self._addingMemberInfo = nil}

  public var ownerGroup: Group_GroupInfo {
    get {return _ownerGroup ?? Group_GroupInfo()}
    set {_ownerGroup = newValue}
  }
  /// Returns true if `ownerGroup` has been explicitly set.
  public var hasOwnerGroup: Bool {return self._ownerGroup != nil}
  /// Clears the value of `ownerGroup`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerGroup() {self._ownerGroup = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _addedMemberInfo: Group_MemberInfo? = nil
  fileprivate var _addingMemberInfo: Group_MemberInfo? = nil
  fileprivate var _ownerGroup: Group_GroupInfo? = nil
}

/// Response: AddMemberWorkspaceRequest
public struct Group_AddMemberWorkspaceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isMemberWorkspace: Bool = false

  public var refGroupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request: LeaveGroupRequest
public struct Group_LeaveGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var leaveMember: Group_MemberInfo {
    get {return _leaveMember ?? Group_MemberInfo()}
    set {_leaveMember = newValue}
  }
  /// Returns true if `leaveMember` has been explicitly set.
  public var hasLeaveMember: Bool {return self._leaveMember != nil}
  /// Clears the value of `leaveMember`. Subsequent reads from it will return its default value.
  public mutating func clearLeaveMember() {self._leaveMember = nil}

  public var leaveMemberBy: Group_MemberInfo {
    get {return _leaveMemberBy ?? Group_MemberInfo()}
    set {_leaveMemberBy = newValue}
  }
  /// Returns true if `leaveMemberBy` has been explicitly set.
  public var hasLeaveMemberBy: Bool {return self._leaveMemberBy != nil}
  /// Clears the value of `leaveMemberBy`. Subsequent reads from it will return its default value.
  public mutating func clearLeaveMemberBy() {self._leaveMemberBy = nil}

  public var groupID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _leaveMember: Group_MemberInfo? = nil
  fileprivate var _leaveMemberBy: Group_MemberInfo? = nil
}

/// Response: WorkspaceLeaveGroupRequest
public struct Group_WorkspaceLeaveGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var leaveMember: Group_MemberInfo {
    get {return _leaveMember ?? Group_MemberInfo()}
    set {_leaveMember = newValue}
  }
  /// Returns true if `leaveMember` has been explicitly set.
  public var hasLeaveMember: Bool {return self._leaveMember != nil}
  /// Clears the value of `leaveMember`. Subsequent reads from it will return its default value.
  public mutating func clearLeaveMember() {self._leaveMember = nil}

  public var leaveMemberBy: Group_MemberInfo {
    get {return _leaveMemberBy ?? Group_MemberInfo()}
    set {_leaveMemberBy = newValue}
  }
  /// Returns true if `leaveMemberBy` has been explicitly set.
  public var hasLeaveMemberBy: Bool {return self._leaveMemberBy != nil}
  /// Clears the value of `leaveMemberBy`. Subsequent reads from it will return its default value.
  public mutating func clearLeaveMemberBy() {self._leaveMemberBy = nil}

  public var ownerGroup: Group_GroupInfo {
    get {return _ownerGroup ?? Group_GroupInfo()}
    set {_ownerGroup = newValue}
  }
  /// Returns true if `ownerGroup` has been explicitly set.
  public var hasOwnerGroup: Bool {return self._ownerGroup != nil}
  /// Clears the value of `ownerGroup`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerGroup() {self._ownerGroup = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _leaveMember: Group_MemberInfo? = nil
  fileprivate var _leaveMemberBy: Group_MemberInfo? = nil
  fileprivate var _ownerGroup: Group_GroupInfo? = nil
}

public struct Group_WorkspaceNotifyDeactiveMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deactiveAccountID: String = String()

  public var clientIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "group"

extension Group_MessageObjectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageObjectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "group_type"),
    4: .standard(proto: "from_client_id"),
    5: .standard(proto: "client_id"),
    6: .same(proto: "message"),
    7: .standard(proto: "lst_client_read"),
    8: .standard(proto: "created_at"),
    9: .standard(proto: "updated_at"),
    10: .standard(proto: "sender_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fromClientID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.lstClientRead) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.updatedAt) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.senderMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 3)
    }
    if !self.fromClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientID, fieldNumber: 4)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 5)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 6)
    }
    if !self.lstClientRead.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstClientRead, fieldNumber: 7)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 8)
    }
    if self.updatedAt != 0 {
      try visitor.visitSingularInt64Field(value: self.updatedAt, fieldNumber: 9)
    }
    if !self.senderMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderMessage, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_MessageObjectResponse, rhs: Group_MessageObjectResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.fromClientID != rhs.fromClientID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.lstClientRead != rhs.lstClientRead {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.senderMessage != rhs.senderMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_ClientReadObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientReadObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "avatar"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_ClientReadObject, rhs: Group_ClientReadObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_ClientInGroupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientInGroupResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "workspace_domain"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workspaceDomain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.workspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.workspaceDomain, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_ClientInGroupResponse, rhs: Group_ClientInGroupResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.workspaceDomain != rhs.workspaceDomain {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GroupClientKeyObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupClientKeyObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "workspace_domain"),
    2: .same(proto: "clientId"),
    3: .same(proto: "deviceId"),
    4: .same(proto: "clientKeyDistribution"),
    5: .same(proto: "senderKeyId"),
    6: .same(proto: "senderKey"),
    7: .same(proto: "publicKey"),
    8: .same(proto: "privateKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.workspaceDomain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.deviceID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.clientKeyDistribution) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.senderKeyID) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.senderKey) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.privateKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.workspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.workspaceDomain, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 3)
    }
    if !self.clientKeyDistribution.isEmpty {
      try visitor.visitSingularBytesField(value: self.clientKeyDistribution, fieldNumber: 4)
    }
    if self.senderKeyID != 0 {
      try visitor.visitSingularInt64Field(value: self.senderKeyID, fieldNumber: 5)
    }
    if !self.senderKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderKey, fieldNumber: 6)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 7)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularStringField(value: self.privateKey, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GroupClientKeyObject, rhs: Group_GroupClientKeyObject) -> Bool {
    if lhs.workspaceDomain != rhs.workspaceDomain {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.clientKeyDistribution != rhs.clientKeyDistribution {return false}
    if lhs.senderKeyID != rhs.senderKeyID {return false}
    if lhs.senderKey != rhs.senderKey {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GroupObjectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupObjectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "group_avatar"),
    4: .standard(proto: "group_type"),
    5: .standard(proto: "lst_client"),
    6: .standard(proto: "last_message_at"),
    7: .standard(proto: "last_message"),
    8: .standard(proto: "created_by_client_id"),
    9: .standard(proto: "created_at"),
    10: .standard(proto: "updated_by_client_id"),
    11: .standard(proto: "updated_at"),
    12: .standard(proto: "group_rtc_token"),
    13: .standard(proto: "has_unread_message"),
    14: .standard(proto: "client_key"),
  ]

  fileprivate class _StorageClass {
    var _groupID: Int64 = 0
    var _groupName: String = String()
    var _groupAvatar: String = String()
    var _groupType: String = String()
    var _lstClient: [Group_ClientInGroupResponse] = []
    var _lastMessageAt: Int64 = 0
    var _lastMessage: Group_MessageObjectResponse? = nil
    var _createdByClientID: String = String()
    var _createdAt: Int64 = 0
    var _updatedByClientID: String = String()
    var _updatedAt: Int64 = 0
    var _groupRtcToken: String = String()
    var _hasUnreadMessage_p: Bool = false
    var _clientKey: Group_GroupClientKeyObject? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _groupID = source._groupID
      _groupName = source._groupName
      _groupAvatar = source._groupAvatar
      _groupType = source._groupType
      _lstClient = source._lstClient
      _lastMessageAt = source._lastMessageAt
      _lastMessage = source._lastMessage
      _createdByClientID = source._createdByClientID
      _createdAt = source._createdAt
      _updatedByClientID = source._updatedByClientID
      _updatedAt = source._updatedAt
      _groupRtcToken = source._groupRtcToken
      _hasUnreadMessage_p = source._hasUnreadMessage_p
      _clientKey = source._clientKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._groupName) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._groupAvatar) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._groupType) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._lstClient) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._lastMessageAt) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._lastMessage) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._createdByClientID) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._createdAt) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._updatedByClientID) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._updatedAt) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._groupRtcToken) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._hasUnreadMessage_p) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._clientKey) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 1)
      }
      if !_storage._groupName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupName, fieldNumber: 2)
      }
      if !_storage._groupAvatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupAvatar, fieldNumber: 3)
      }
      if !_storage._groupType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupType, fieldNumber: 4)
      }
      if !_storage._lstClient.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lstClient, fieldNumber: 5)
      }
      if _storage._lastMessageAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastMessageAt, fieldNumber: 6)
      }
      try { if let v = _storage._lastMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._createdByClientID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdByClientID, fieldNumber: 8)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 9)
      }
      if !_storage._updatedByClientID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updatedByClientID, fieldNumber: 10)
      }
      if _storage._updatedAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._updatedAt, fieldNumber: 11)
      }
      if !_storage._groupRtcToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupRtcToken, fieldNumber: 12)
      }
      if _storage._hasUnreadMessage_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasUnreadMessage_p, fieldNumber: 13)
      }
      try { if let v = _storage._clientKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GroupObjectResponse, rhs: Group_GroupObjectResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._groupName != rhs_storage._groupName {return false}
        if _storage._groupAvatar != rhs_storage._groupAvatar {return false}
        if _storage._groupType != rhs_storage._groupType {return false}
        if _storage._lstClient != rhs_storage._lstClient {return false}
        if _storage._lastMessageAt != rhs_storage._lastMessageAt {return false}
        if _storage._lastMessage != rhs_storage._lastMessage {return false}
        if _storage._createdByClientID != rhs_storage._createdByClientID {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedByClientID != rhs_storage._updatedByClientID {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._groupRtcToken != rhs_storage._groupRtcToken {return false}
        if _storage._hasUnreadMessage_p != rhs_storage._hasUnreadMessage_p {return false}
        if _storage._clientKey != rhs_storage._clientKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_BaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_BaseResponse, rhs: Group_BaseResponse) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_ClientInGroupObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientInGroupObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "workspace_domain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workspaceDomain) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.workspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.workspaceDomain, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_ClientInGroupObject, rhs: Group_ClientInGroupObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.workspaceDomain != rhs.workspaceDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_CreateGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_name"),
    2: .standard(proto: "group_type"),
    3: .standard(proto: "created_by_client_id"),
    4: .standard(proto: "lst_client"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.createdByClientID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.lstClient) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 1)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 2)
    }
    if !self.createdByClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.createdByClientID, fieldNumber: 3)
    }
    if !self.lstClient.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstClient, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_CreateGroupRequest, rhs: Group_CreateGroupRequest) -> Bool {
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.createdByClientID != rhs.createdByClientID {return false}
    if lhs.lstClient != rhs.lstClient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_UpdateGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "group_avatar"),
    4: .standard(proto: "updated_by_client_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupAvatar) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updatedByClientID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if !self.groupAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.groupAvatar, fieldNumber: 3)
    }
    if !self.updatedByClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedByClientID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_UpdateGroupRequest, rhs: Group_UpdateGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupAvatar != rhs.groupAvatar {return false}
    if lhs.updatedByClientID != rhs.updatedByClientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GetGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GetGroupRequest, rhs: Group_GetGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GetJoinedGroupsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetJoinedGroupsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GetJoinedGroupsRequest, rhs: Group_GetJoinedGroupsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GetJoinedGroupsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetJoinedGroupsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lst_group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.lstGroup) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lstGroup.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstGroup, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GetJoinedGroupsResponse, rhs: Group_GetJoinedGroupsResponse) -> Bool {
    if lhs.lstGroup != rhs.lstGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_SearchGroupsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchGroupsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyword"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyword) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyword.isEmpty {
      try visitor.visitSingularStringField(value: self.keyword, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_SearchGroupsRequest, rhs: Group_SearchGroupsRequest) -> Bool {
    if lhs.keyword != rhs.keyword {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_SearchGroupsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchGroupsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lst_group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.lstGroup) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lstGroup.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lstGroup, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_SearchGroupsResponse, rhs: Group_SearchGroupsResponse) -> Bool {
    if lhs.lstGroup != rhs.lstGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_MemberInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "display_name"),
    3: .standard(proto: "workspace_domain"),
    4: .same(proto: "status"),
    5: .standard(proto: "ref_group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workspaceDomain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.refGroupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.workspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.workspaceDomain, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    if self.refGroupID != 0 {
      try visitor.visitSingularInt64Field(value: self.refGroupID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_MemberInfo, rhs: Group_MemberInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.displayName != rhs.displayName {return false}
    if lhs.workspaceDomain != rhs.workspaceDomain {return false}
    if lhs.status != rhs.status {return false}
    if lhs.refGroupID != rhs.refGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_AddMemberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddMemberRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "added_member_info"),
    2: .standard(proto: "adding_member_info"),
    3: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._addedMemberInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._addingMemberInfo) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._addedMemberInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._addingMemberInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_AddMemberRequest, rhs: Group_AddMemberRequest) -> Bool {
    if lhs._addedMemberInfo != rhs._addedMemberInfo {return false}
    if lhs._addingMemberInfo != rhs._addingMemberInfo {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_JoinGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_JoinGroupRequest, rhs: Group_JoinGroupRequest) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_CreateGroupWorkspaceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGroupWorkspaceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_name"),
    2: .standard(proto: "group_type"),
    3: .standard(proto: "from_client_id"),
    4: .standard(proto: "client_id"),
    5: .standard(proto: "lst_client"),
    6: .standard(proto: "owner_group_id"),
    7: .standard(proto: "owner_workspace_domain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fromClientID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.lstClient) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.ownerGroupID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.ownerWorkspaceDomain) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 1)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 2)
    }
    if !self.fromClientID.isEmpty {
      try visitor.visitSingularStringField(value: self.fromClientID, fieldNumber: 3)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 4)
    }
    if !self.lstClient.isEmpty {
      try visitor.visitSingularStringField(value: self.lstClient, fieldNumber: 5)
    }
    if self.ownerGroupID != 0 {
      try visitor.visitSingularInt64Field(value: self.ownerGroupID, fieldNumber: 6)
    }
    if !self.ownerWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerWorkspaceDomain, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_CreateGroupWorkspaceRequest, rhs: Group_CreateGroupWorkspaceRequest) -> Bool {
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.fromClientID != rhs.fromClientID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.lstClient != rhs.lstClient {return false}
    if lhs.ownerGroupID != rhs.ownerGroupID {return false}
    if lhs.ownerWorkspaceDomain != rhs.ownerWorkspaceDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_CreateGroupWorkspaceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateGroupWorkspaceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "client_name"),
    4: .standard(proto: "client_workspace_domain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.clientName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientWorkspaceDomain) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.clientName.isEmpty {
      try visitor.visitSingularStringField(value: self.clientName, fieldNumber: 3)
    }
    if !self.clientWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.clientWorkspaceDomain, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_CreateGroupWorkspaceResponse, rhs: Group_CreateGroupWorkspaceResponse) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.clientName != rhs.clientName {return false}
    if lhs.clientWorkspaceDomain != rhs.clientWorkspaceDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_GroupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "group_type"),
    4: .standard(proto: "group_clients"),
    5: .standard(proto: "group_workspace_domain"),
    6: .standard(proto: "created_by"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.groupClients) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.groupWorkspaceDomain) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.createdBy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if !self.groupType.isEmpty {
      try visitor.visitSingularStringField(value: self.groupType, fieldNumber: 3)
    }
    if !self.groupClients.isEmpty {
      try visitor.visitSingularStringField(value: self.groupClients, fieldNumber: 4)
    }
    if !self.groupWorkspaceDomain.isEmpty {
      try visitor.visitSingularStringField(value: self.groupWorkspaceDomain, fieldNumber: 5)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_GroupInfo, rhs: Group_GroupInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.groupClients != rhs.groupClients {return false}
    if lhs.groupWorkspaceDomain != rhs.groupWorkspaceDomain {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_AddMemberWorkspaceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddMemberWorkspaceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "added_member_info"),
    2: .standard(proto: "adding_member_info"),
    3: .standard(proto: "owner_group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._addedMemberInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._addingMemberInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ownerGroup) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._addedMemberInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._addingMemberInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ownerGroup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_AddMemberWorkspaceRequest, rhs: Group_AddMemberWorkspaceRequest) -> Bool {
    if lhs._addedMemberInfo != rhs._addedMemberInfo {return false}
    if lhs._addingMemberInfo != rhs._addingMemberInfo {return false}
    if lhs._ownerGroup != rhs._ownerGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_AddMemberWorkspaceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddMemberWorkspaceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_member_workspace"),
    2: .standard(proto: "ref_group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isMemberWorkspace) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.refGroupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isMemberWorkspace != false {
      try visitor.visitSingularBoolField(value: self.isMemberWorkspace, fieldNumber: 1)
    }
    if self.refGroupID != 0 {
      try visitor.visitSingularInt64Field(value: self.refGroupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_AddMemberWorkspaceResponse, rhs: Group_AddMemberWorkspaceResponse) -> Bool {
    if lhs.isMemberWorkspace != rhs.isMemberWorkspace {return false}
    if lhs.refGroupID != rhs.refGroupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_LeaveGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeaveGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "leave_member"),
    2: .standard(proto: "leave_member_by"),
    3: .standard(proto: "group_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._leaveMember) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._leaveMemberBy) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._leaveMember {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._leaveMemberBy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_LeaveGroupRequest, rhs: Group_LeaveGroupRequest) -> Bool {
    if lhs._leaveMember != rhs._leaveMember {return false}
    if lhs._leaveMemberBy != rhs._leaveMemberBy {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_WorkspaceLeaveGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkspaceLeaveGroupRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "leave_member"),
    2: .standard(proto: "leave_member_by"),
    3: .standard(proto: "owner_group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._leaveMember) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._leaveMemberBy) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ownerGroup) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._leaveMember {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._leaveMemberBy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ownerGroup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_WorkspaceLeaveGroupRequest, rhs: Group_WorkspaceLeaveGroupRequest) -> Bool {
    if lhs._leaveMember != rhs._leaveMember {return false}
    if lhs._leaveMemberBy != rhs._leaveMemberBy {return false}
    if lhs._ownerGroup != rhs._ownerGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Group_WorkspaceNotifyDeactiveMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkspaceNotifyDeactiveMember"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deactive_account_id"),
    2: .standard(proto: "client_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deactiveAccountID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.clientIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deactiveAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.deactiveAccountID, fieldNumber: 1)
    }
    if !self.clientIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clientIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Group_WorkspaceNotifyDeactiveMember, rhs: Group_WorkspaceNotifyDeactiveMember) -> Bool {
    if lhs.deactiveAccountID != rhs.deactiveAccountID {return false}
    if lhs.clientIds != rhs.clientIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
