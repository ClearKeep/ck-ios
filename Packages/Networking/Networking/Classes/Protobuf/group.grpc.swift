//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: group.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Method
///
/// Usage: instantiate `Group_GroupClient`, then call methods of this protocol to make API calls.
internal protocol Group_GroupClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Group_GroupClientInterceptorFactoryProtocol? { get }

  func create_group(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse>

  func create_group_workspace(
    _ request: Group_CreateGroupWorkspaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse>

  func get_group(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse>

  func search_groups(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse>

  func get_joined_groups(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse>

  func join_group(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_JoinGroupRequest, Group_BaseResponse>

  func add_member(
    _ request: Group_AddMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_AddMemberRequest, Group_BaseResponse>

  func leave_group(
    _ request: Group_LeaveGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_LeaveGroupRequest, Group_BaseResponse>

  func workspace_add_member(
    _ request: Group_AddMemberWorkspaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse>

  func workspace_leave_group(
    _ request: Group_WorkspaceLeaveGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse>

  func workspace_notify_deactive_member(
    _ request: Group_WorkspaceNotifyDeactiveMember,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse>

  func workspace_member_forgot_password_in_group(
    _ request: Group_WorkspaceMemberForgotPasswordInGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse>

  func workspace_member_reset_pincode_in_group(
    _ request: Group_WorkspaceMemberResetPincodeInGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse>
}

extension Group_GroupClientProtocol {
  internal var serviceName: String {
    return "group.Group"
  }

  /// Unary call to create_group
  ///
  /// - Parameters:
  ///   - request: Request to send to create_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create_group(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_groupInterceptors() ?? []
    )
  }

  /// Unary call to create_group_workspace
  ///
  /// - Parameters:
  ///   - request: Request to send to create_group_workspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func create_group_workspace(
    _ request: Group_CreateGroupWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group_workspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_group_workspaceInterceptors() ?? []
    )
  }

  /// Unary call to get_group
  ///
  /// - Parameters:
  ///   - request: Request to send to get_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_group(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_groupInterceptors() ?? []
    )
  }

  /// Unary call to search_groups
  ///
  /// - Parameters:
  ///   - request: Request to send to search_groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func search_groups(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.search_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesearch_groupsInterceptors() ?? []
    )
  }

  /// Unary call to get_joined_groups
  ///
  /// - Parameters:
  ///   - request: Request to send to get_joined_groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_joined_groups(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_joined_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_joined_groupsInterceptors() ?? []
    )
  }

  /// Unary call to join_group
  ///
  /// - Parameters:
  ///   - request: Request to send to join_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func join_group(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_JoinGroupRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.join_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makejoin_groupInterceptors() ?? []
    )
  }

  /// Unary call to add_member
  ///
  /// - Parameters:
  ///   - request: Request to send to add_member.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func add_member(
    _ request: Group_AddMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_AddMemberRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeadd_memberInterceptors() ?? []
    )
  }

  /// Unary call to leave_group
  ///
  /// - Parameters:
  ///   - request: Request to send to leave_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leave_group(
    _ request: Group_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_LeaveGroupRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeleave_groupInterceptors() ?? []
    )
  }

  ///workspace call
  ///
  /// - Parameters:
  ///   - request: Request to send to workspace_add_member.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspace_add_member(
    _ request: Group_AddMemberWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_add_memberInterceptors() ?? []
    )
  }

  /// Unary call to workspace_leave_group
  ///
  /// - Parameters:
  ///   - request: Request to send to workspace_leave_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspace_leave_group(
    _ request: Group_WorkspaceLeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_leave_groupInterceptors() ?? []
    )
  }

  /// Unary call to workspace_notify_deactive_member
  ///
  /// - Parameters:
  ///   - request: Request to send to workspace_notify_deactive_member.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspace_notify_deactive_member(
    _ request: Group_WorkspaceNotifyDeactiveMember,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_notify_deactive_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_notify_deactive_memberInterceptors() ?? []
    )
  }

  /// Unary call to workspace_member_forgot_password_in_group
  ///
  /// - Parameters:
  ///   - request: Request to send to workspace_member_forgot_password_in_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspace_member_forgot_password_in_group(
    _ request: Group_WorkspaceMemberForgotPasswordInGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_forgot_password_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_forgot_password_in_groupInterceptors() ?? []
    )
  }

  /// Unary call to workspace_member_reset_pincode_in_group
  ///
  /// - Parameters:
  ///   - request: Request to send to workspace_member_reset_pincode_in_group.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func workspace_member_reset_pincode_in_group(
    _ request: Group_WorkspaceMemberResetPincodeInGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse> {
    return self.makeUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_reset_pincode_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_reset_pincode_in_groupInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Group_GroupClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Group_GroupNIOClient")
internal final class Group_GroupClient: Group_GroupClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Group_GroupClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Group_GroupClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the group.Group service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Group_GroupClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Group_GroupNIOClient: Group_GroupClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Group_GroupClientInterceptorFactoryProtocol?

  /// Creates a client for the group.Group service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Group_GroupClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Method
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Group_GroupAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Group_GroupClientInterceptorFactoryProtocol? { get }

  func makeCreateGroupCall(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse>

  func makeCreateGroupWorkspaceCall(
    _ request: Group_CreateGroupWorkspaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse>

  func makeGetGroupCall(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse>

  func makeSearchGroupsCall(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse>

  func makeGetJoinedGroupsCall(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse>

  func makeJoinGroupCall(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_JoinGroupRequest, Group_BaseResponse>

  func makeAddMemberCall(
    _ request: Group_AddMemberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_AddMemberRequest, Group_BaseResponse>

  func makeLeaveGroupCall(
    _ request: Group_LeaveGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_LeaveGroupRequest, Group_BaseResponse>

  func makeWorkspaceAddMemberCall(
    _ request: Group_AddMemberWorkspaceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse>

  func makeWorkspaceLeaveGroupCall(
    _ request: Group_WorkspaceLeaveGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse>

  func makeWorkspaceNotifyDeactiveMemberCall(
    _ request: Group_WorkspaceNotifyDeactiveMember,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse>

  func makeWorkspaceMemberForgotPasswordInGroupCall(
    _ request: Group_WorkspaceMemberForgotPasswordInGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse>

  func makeWorkspaceMemberResetPincodeInGroupCall(
    _ request: Group_WorkspaceMemberResetPincodeInGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Group_GroupAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Group_GroupClientMetadata.serviceDescriptor
  }

  internal var interceptors: Group_GroupClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateGroupCall(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_CreateGroupRequest, Group_GroupObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_groupInterceptors() ?? []
    )
  }

  internal func makeCreateGroupWorkspaceCall(
    _ request: Group_CreateGroupWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group_workspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_group_workspaceInterceptors() ?? []
    )
  }

  internal func makeGetGroupCall(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_GetGroupRequest, Group_GroupObjectResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_groupInterceptors() ?? []
    )
  }

  internal func makeSearchGroupsCall(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_SearchGroupsRequest, Group_SearchGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.search_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesearch_groupsInterceptors() ?? []
    )
  }

  internal func makeGetJoinedGroupsCall(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_joined_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_joined_groupsInterceptors() ?? []
    )
  }

  internal func makeJoinGroupCall(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_JoinGroupRequest, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.join_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makejoin_groupInterceptors() ?? []
    )
  }

  internal func makeAddMemberCall(
    _ request: Group_AddMemberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_AddMemberRequest, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeadd_memberInterceptors() ?? []
    )
  }

  internal func makeLeaveGroupCall(
    _ request: Group_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_LeaveGroupRequest, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeleave_groupInterceptors() ?? []
    )
  }

  internal func makeWorkspaceAddMemberCall(
    _ request: Group_AddMemberWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_add_memberInterceptors() ?? []
    )
  }

  internal func makeWorkspaceLeaveGroupCall(
    _ request: Group_WorkspaceLeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_leave_groupInterceptors() ?? []
    )
  }

  internal func makeWorkspaceNotifyDeactiveMemberCall(
    _ request: Group_WorkspaceNotifyDeactiveMember,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_notify_deactive_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_notify_deactive_memberInterceptors() ?? []
    )
  }

  internal func makeWorkspaceMemberForgotPasswordInGroupCall(
    _ request: Group_WorkspaceMemberForgotPasswordInGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_forgot_password_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_forgot_password_in_groupInterceptors() ?? []
    )
  }

  internal func makeWorkspaceMemberResetPincodeInGroupCall(
    _ request: Group_WorkspaceMemberResetPincodeInGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_reset_pincode_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_reset_pincode_in_groupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Group_GroupAsyncClientProtocol {
  internal func create_group(
    _ request: Group_CreateGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_GroupObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_groupInterceptors() ?? []
    )
  }

  internal func create_group_workspace(
    _ request: Group_CreateGroupWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_CreateGroupWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.create_group_workspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreate_group_workspaceInterceptors() ?? []
    )
  }

  internal func get_group(
    _ request: Group_GetGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_GroupObjectResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_groupInterceptors() ?? []
    )
  }

  internal func search_groups(
    _ request: Group_SearchGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_SearchGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.search_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesearch_groupsInterceptors() ?? []
    )
  }

  internal func get_joined_groups(
    _ request: Group_GetJoinedGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_GetJoinedGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.get_joined_groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_joined_groupsInterceptors() ?? []
    )
  }

  internal func join_group(
    _ request: Group_JoinGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.join_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makejoin_groupInterceptors() ?? []
    )
  }

  internal func add_member(
    _ request: Group_AddMemberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeadd_memberInterceptors() ?? []
    )
  }

  internal func leave_group(
    _ request: Group_LeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeleave_groupInterceptors() ?? []
    )
  }

  internal func workspace_add_member(
    _ request: Group_AddMemberWorkspaceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_AddMemberWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_add_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_add_memberInterceptors() ?? []
    )
  }

  internal func workspace_leave_group(
    _ request: Group_WorkspaceLeaveGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_leave_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_leave_groupInterceptors() ?? []
    )
  }

  internal func workspace_notify_deactive_member(
    _ request: Group_WorkspaceNotifyDeactiveMember,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_notify_deactive_member.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_notify_deactive_memberInterceptors() ?? []
    )
  }

  internal func workspace_member_forgot_password_in_group(
    _ request: Group_WorkspaceMemberForgotPasswordInGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_forgot_password_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_forgot_password_in_groupInterceptors() ?? []
    )
  }

  internal func workspace_member_reset_pincode_in_group(
    _ request: Group_WorkspaceMemberResetPincodeInGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Group_BaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Group_GroupClientMetadata.Methods.workspace_member_reset_pincode_in_group.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeworkspace_member_reset_pincode_in_groupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Group_GroupAsyncClient: Group_GroupAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Group_GroupClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Group_GroupClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Group_GroupClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'create_group'.
  func makecreate_groupInterceptors() -> [ClientInterceptor<Group_CreateGroupRequest, Group_GroupObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'create_group_workspace'.
  func makecreate_group_workspaceInterceptors() -> [ClientInterceptor<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'get_group'.
  func makeget_groupInterceptors() -> [ClientInterceptor<Group_GetGroupRequest, Group_GroupObjectResponse>]

  /// - Returns: Interceptors to use when invoking 'search_groups'.
  func makesearch_groupsInterceptors() -> [ClientInterceptor<Group_SearchGroupsRequest, Group_SearchGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'get_joined_groups'.
  func makeget_joined_groupsInterceptors() -> [ClientInterceptor<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse>]

  /// - Returns: Interceptors to use when invoking 'join_group'.
  func makejoin_groupInterceptors() -> [ClientInterceptor<Group_JoinGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'add_member'.
  func makeadd_memberInterceptors() -> [ClientInterceptor<Group_AddMemberRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'leave_group'.
  func makeleave_groupInterceptors() -> [ClientInterceptor<Group_LeaveGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'workspace_add_member'.
  func makeworkspace_add_memberInterceptors() -> [ClientInterceptor<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'workspace_leave_group'.
  func makeworkspace_leave_groupInterceptors() -> [ClientInterceptor<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'workspace_notify_deactive_member'.
  func makeworkspace_notify_deactive_memberInterceptors() -> [ClientInterceptor<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'workspace_member_forgot_password_in_group'.
  func makeworkspace_member_forgot_password_in_groupInterceptors() -> [ClientInterceptor<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse>]

  /// - Returns: Interceptors to use when invoking 'workspace_member_reset_pincode_in_group'.
  func makeworkspace_member_reset_pincode_in_groupInterceptors() -> [ClientInterceptor<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse>]
}

internal enum Group_GroupClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Group",
    fullName: "group.Group",
    methods: [
      Group_GroupClientMetadata.Methods.create_group,
      Group_GroupClientMetadata.Methods.create_group_workspace,
      Group_GroupClientMetadata.Methods.get_group,
      Group_GroupClientMetadata.Methods.search_groups,
      Group_GroupClientMetadata.Methods.get_joined_groups,
      Group_GroupClientMetadata.Methods.join_group,
      Group_GroupClientMetadata.Methods.add_member,
      Group_GroupClientMetadata.Methods.leave_group,
      Group_GroupClientMetadata.Methods.workspace_add_member,
      Group_GroupClientMetadata.Methods.workspace_leave_group,
      Group_GroupClientMetadata.Methods.workspace_notify_deactive_member,
      Group_GroupClientMetadata.Methods.workspace_member_forgot_password_in_group,
      Group_GroupClientMetadata.Methods.workspace_member_reset_pincode_in_group,
    ]
  )

  internal enum Methods {
    internal static let create_group = GRPCMethodDescriptor(
      name: "create_group",
      path: "/group.Group/create_group",
      type: GRPCCallType.unary
    )

    internal static let create_group_workspace = GRPCMethodDescriptor(
      name: "create_group_workspace",
      path: "/group.Group/create_group_workspace",
      type: GRPCCallType.unary
    )

    internal static let get_group = GRPCMethodDescriptor(
      name: "get_group",
      path: "/group.Group/get_group",
      type: GRPCCallType.unary
    )

    internal static let search_groups = GRPCMethodDescriptor(
      name: "search_groups",
      path: "/group.Group/search_groups",
      type: GRPCCallType.unary
    )

    internal static let get_joined_groups = GRPCMethodDescriptor(
      name: "get_joined_groups",
      path: "/group.Group/get_joined_groups",
      type: GRPCCallType.unary
    )

    internal static let join_group = GRPCMethodDescriptor(
      name: "join_group",
      path: "/group.Group/join_group",
      type: GRPCCallType.unary
    )

    internal static let add_member = GRPCMethodDescriptor(
      name: "add_member",
      path: "/group.Group/add_member",
      type: GRPCCallType.unary
    )

    internal static let leave_group = GRPCMethodDescriptor(
      name: "leave_group",
      path: "/group.Group/leave_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_add_member = GRPCMethodDescriptor(
      name: "workspace_add_member",
      path: "/group.Group/workspace_add_member",
      type: GRPCCallType.unary
    )

    internal static let workspace_leave_group = GRPCMethodDescriptor(
      name: "workspace_leave_group",
      path: "/group.Group/workspace_leave_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_notify_deactive_member = GRPCMethodDescriptor(
      name: "workspace_notify_deactive_member",
      path: "/group.Group/workspace_notify_deactive_member",
      type: GRPCCallType.unary
    )

    internal static let workspace_member_forgot_password_in_group = GRPCMethodDescriptor(
      name: "workspace_member_forgot_password_in_group",
      path: "/group.Group/workspace_member_forgot_password_in_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_member_reset_pincode_in_group = GRPCMethodDescriptor(
      name: "workspace_member_reset_pincode_in_group",
      path: "/group.Group/workspace_member_reset_pincode_in_group",
      type: GRPCCallType.unary
    )
  }
}

/// Method
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Group_GroupProvider: CallHandlerProvider {
  var interceptors: Group_GroupServerInterceptorFactoryProtocol? { get }

  func create_group(request: Group_CreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GroupObjectResponse>

  func create_group_workspace(request: Group_CreateGroupWorkspaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_CreateGroupWorkspaceResponse>

  func get_group(request: Group_GetGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GroupObjectResponse>

  func search_groups(request: Group_SearchGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_SearchGroupsResponse>

  func get_joined_groups(request: Group_GetJoinedGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_GetJoinedGroupsResponse>

  func join_group(request: Group_JoinGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  func add_member(request: Group_AddMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  func leave_group(request: Group_LeaveGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  ///workspace call
  func workspace_add_member(request: Group_AddMemberWorkspaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_AddMemberWorkspaceResponse>

  func workspace_leave_group(request: Group_WorkspaceLeaveGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  func workspace_notify_deactive_member(request: Group_WorkspaceNotifyDeactiveMember, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  func workspace_member_forgot_password_in_group(request: Group_WorkspaceMemberForgotPasswordInGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>

  func workspace_member_reset_pincode_in_group(request: Group_WorkspaceMemberResetPincodeInGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Group_BaseResponse>
}

extension Group_GroupProvider {
  internal var serviceName: Substring {
    return Group_GroupServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "create_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_CreateGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_GroupObjectResponse>(),
        interceptors: self.interceptors?.makecreate_groupInterceptors() ?? [],
        userFunction: self.create_group(request:context:)
      )

    case "create_group_workspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_CreateGroupWorkspaceRequest>(),
        responseSerializer: ProtobufSerializer<Group_CreateGroupWorkspaceResponse>(),
        interceptors: self.interceptors?.makecreate_group_workspaceInterceptors() ?? [],
        userFunction: self.create_group_workspace(request:context:)
      )

    case "get_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_GetGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_GroupObjectResponse>(),
        interceptors: self.interceptors?.makeget_groupInterceptors() ?? [],
        userFunction: self.get_group(request:context:)
      )

    case "search_groups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_SearchGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Group_SearchGroupsResponse>(),
        interceptors: self.interceptors?.makesearch_groupsInterceptors() ?? [],
        userFunction: self.search_groups(request:context:)
      )

    case "get_joined_groups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_GetJoinedGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Group_GetJoinedGroupsResponse>(),
        interceptors: self.interceptors?.makeget_joined_groupsInterceptors() ?? [],
        userFunction: self.get_joined_groups(request:context:)
      )

    case "join_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_JoinGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makejoin_groupInterceptors() ?? [],
        userFunction: self.join_group(request:context:)
      )

    case "add_member":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_AddMemberRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeadd_memberInterceptors() ?? [],
        userFunction: self.add_member(request:context:)
      )

    case "leave_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_LeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeleave_groupInterceptors() ?? [],
        userFunction: self.leave_group(request:context:)
      )

    case "workspace_add_member":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_AddMemberWorkspaceRequest>(),
        responseSerializer: ProtobufSerializer<Group_AddMemberWorkspaceResponse>(),
        interceptors: self.interceptors?.makeworkspace_add_memberInterceptors() ?? [],
        userFunction: self.workspace_add_member(request:context:)
      )

    case "workspace_leave_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceLeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_leave_groupInterceptors() ?? [],
        userFunction: self.workspace_leave_group(request:context:)
      )

    case "workspace_notify_deactive_member":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceNotifyDeactiveMember>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_notify_deactive_memberInterceptors() ?? [],
        userFunction: self.workspace_notify_deactive_member(request:context:)
      )

    case "workspace_member_forgot_password_in_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceMemberForgotPasswordInGroup>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_member_forgot_password_in_groupInterceptors() ?? [],
        userFunction: self.workspace_member_forgot_password_in_group(request:context:)
      )

    case "workspace_member_reset_pincode_in_group":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceMemberResetPincodeInGroup>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_member_reset_pincode_in_groupInterceptors() ?? [],
        userFunction: self.workspace_member_reset_pincode_in_group(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Method
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Group_GroupAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Group_GroupServerInterceptorFactoryProtocol? { get }

  @Sendable func create_group(
    request: Group_CreateGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_GroupObjectResponse

  @Sendable func create_group_workspace(
    request: Group_CreateGroupWorkspaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_CreateGroupWorkspaceResponse

  @Sendable func get_group(
    request: Group_GetGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_GroupObjectResponse

  @Sendable func search_groups(
    request: Group_SearchGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_SearchGroupsResponse

  @Sendable func get_joined_groups(
    request: Group_GetJoinedGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_GetJoinedGroupsResponse

  @Sendable func join_group(
    request: Group_JoinGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  @Sendable func add_member(
    request: Group_AddMemberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  @Sendable func leave_group(
    request: Group_LeaveGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  ///workspace call
  @Sendable func workspace_add_member(
    request: Group_AddMemberWorkspaceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_AddMemberWorkspaceResponse

  @Sendable func workspace_leave_group(
    request: Group_WorkspaceLeaveGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  @Sendable func workspace_notify_deactive_member(
    request: Group_WorkspaceNotifyDeactiveMember,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  @Sendable func workspace_member_forgot_password_in_group(
    request: Group_WorkspaceMemberForgotPasswordInGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse

  @Sendable func workspace_member_reset_pincode_in_group(
    request: Group_WorkspaceMemberResetPincodeInGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Group_BaseResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Group_GroupAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Group_GroupServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Group_GroupServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Group_GroupServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "create_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_CreateGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_GroupObjectResponse>(),
        interceptors: self.interceptors?.makecreate_groupInterceptors() ?? [],
        wrapping: self.create_group(request:context:)
      )

    case "create_group_workspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_CreateGroupWorkspaceRequest>(),
        responseSerializer: ProtobufSerializer<Group_CreateGroupWorkspaceResponse>(),
        interceptors: self.interceptors?.makecreate_group_workspaceInterceptors() ?? [],
        wrapping: self.create_group_workspace(request:context:)
      )

    case "get_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_GetGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_GroupObjectResponse>(),
        interceptors: self.interceptors?.makeget_groupInterceptors() ?? [],
        wrapping: self.get_group(request:context:)
      )

    case "search_groups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_SearchGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Group_SearchGroupsResponse>(),
        interceptors: self.interceptors?.makesearch_groupsInterceptors() ?? [],
        wrapping: self.search_groups(request:context:)
      )

    case "get_joined_groups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_GetJoinedGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Group_GetJoinedGroupsResponse>(),
        interceptors: self.interceptors?.makeget_joined_groupsInterceptors() ?? [],
        wrapping: self.get_joined_groups(request:context:)
      )

    case "join_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_JoinGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makejoin_groupInterceptors() ?? [],
        wrapping: self.join_group(request:context:)
      )

    case "add_member":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_AddMemberRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeadd_memberInterceptors() ?? [],
        wrapping: self.add_member(request:context:)
      )

    case "leave_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_LeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeleave_groupInterceptors() ?? [],
        wrapping: self.leave_group(request:context:)
      )

    case "workspace_add_member":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_AddMemberWorkspaceRequest>(),
        responseSerializer: ProtobufSerializer<Group_AddMemberWorkspaceResponse>(),
        interceptors: self.interceptors?.makeworkspace_add_memberInterceptors() ?? [],
        wrapping: self.workspace_add_member(request:context:)
      )

    case "workspace_leave_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceLeaveGroupRequest>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_leave_groupInterceptors() ?? [],
        wrapping: self.workspace_leave_group(request:context:)
      )

    case "workspace_notify_deactive_member":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceNotifyDeactiveMember>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_notify_deactive_memberInterceptors() ?? [],
        wrapping: self.workspace_notify_deactive_member(request:context:)
      )

    case "workspace_member_forgot_password_in_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceMemberForgotPasswordInGroup>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_member_forgot_password_in_groupInterceptors() ?? [],
        wrapping: self.workspace_member_forgot_password_in_group(request:context:)
      )

    case "workspace_member_reset_pincode_in_group":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Group_WorkspaceMemberResetPincodeInGroup>(),
        responseSerializer: ProtobufSerializer<Group_BaseResponse>(),
        interceptors: self.interceptors?.makeworkspace_member_reset_pincode_in_groupInterceptors() ?? [],
        wrapping: self.workspace_member_reset_pincode_in_group(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Group_GroupServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'create_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreate_groupInterceptors() -> [ServerInterceptor<Group_CreateGroupRequest, Group_GroupObjectResponse>]

  /// - Returns: Interceptors to use when handling 'create_group_workspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreate_group_workspaceInterceptors() -> [ServerInterceptor<Group_CreateGroupWorkspaceRequest, Group_CreateGroupWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'get_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_groupInterceptors() -> [ServerInterceptor<Group_GetGroupRequest, Group_GroupObjectResponse>]

  /// - Returns: Interceptors to use when handling 'search_groups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesearch_groupsInterceptors() -> [ServerInterceptor<Group_SearchGroupsRequest, Group_SearchGroupsResponse>]

  /// - Returns: Interceptors to use when handling 'get_joined_groups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_joined_groupsInterceptors() -> [ServerInterceptor<Group_GetJoinedGroupsRequest, Group_GetJoinedGroupsResponse>]

  /// - Returns: Interceptors to use when handling 'join_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makejoin_groupInterceptors() -> [ServerInterceptor<Group_JoinGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'add_member'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeadd_memberInterceptors() -> [ServerInterceptor<Group_AddMemberRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'leave_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeleave_groupInterceptors() -> [ServerInterceptor<Group_LeaveGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'workspace_add_member'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeworkspace_add_memberInterceptors() -> [ServerInterceptor<Group_AddMemberWorkspaceRequest, Group_AddMemberWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'workspace_leave_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeworkspace_leave_groupInterceptors() -> [ServerInterceptor<Group_WorkspaceLeaveGroupRequest, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'workspace_notify_deactive_member'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeworkspace_notify_deactive_memberInterceptors() -> [ServerInterceptor<Group_WorkspaceNotifyDeactiveMember, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'workspace_member_forgot_password_in_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeworkspace_member_forgot_password_in_groupInterceptors() -> [ServerInterceptor<Group_WorkspaceMemberForgotPasswordInGroup, Group_BaseResponse>]

  /// - Returns: Interceptors to use when handling 'workspace_member_reset_pincode_in_group'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeworkspace_member_reset_pincode_in_groupInterceptors() -> [ServerInterceptor<Group_WorkspaceMemberResetPincodeInGroup, Group_BaseResponse>]
}

internal enum Group_GroupServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Group",
    fullName: "group.Group",
    methods: [
      Group_GroupServerMetadata.Methods.create_group,
      Group_GroupServerMetadata.Methods.create_group_workspace,
      Group_GroupServerMetadata.Methods.get_group,
      Group_GroupServerMetadata.Methods.search_groups,
      Group_GroupServerMetadata.Methods.get_joined_groups,
      Group_GroupServerMetadata.Methods.join_group,
      Group_GroupServerMetadata.Methods.add_member,
      Group_GroupServerMetadata.Methods.leave_group,
      Group_GroupServerMetadata.Methods.workspace_add_member,
      Group_GroupServerMetadata.Methods.workspace_leave_group,
      Group_GroupServerMetadata.Methods.workspace_notify_deactive_member,
      Group_GroupServerMetadata.Methods.workspace_member_forgot_password_in_group,
      Group_GroupServerMetadata.Methods.workspace_member_reset_pincode_in_group,
    ]
  )

  internal enum Methods {
    internal static let create_group = GRPCMethodDescriptor(
      name: "create_group",
      path: "/group.Group/create_group",
      type: GRPCCallType.unary
    )

    internal static let create_group_workspace = GRPCMethodDescriptor(
      name: "create_group_workspace",
      path: "/group.Group/create_group_workspace",
      type: GRPCCallType.unary
    )

    internal static let get_group = GRPCMethodDescriptor(
      name: "get_group",
      path: "/group.Group/get_group",
      type: GRPCCallType.unary
    )

    internal static let search_groups = GRPCMethodDescriptor(
      name: "search_groups",
      path: "/group.Group/search_groups",
      type: GRPCCallType.unary
    )

    internal static let get_joined_groups = GRPCMethodDescriptor(
      name: "get_joined_groups",
      path: "/group.Group/get_joined_groups",
      type: GRPCCallType.unary
    )

    internal static let join_group = GRPCMethodDescriptor(
      name: "join_group",
      path: "/group.Group/join_group",
      type: GRPCCallType.unary
    )

    internal static let add_member = GRPCMethodDescriptor(
      name: "add_member",
      path: "/group.Group/add_member",
      type: GRPCCallType.unary
    )

    internal static let leave_group = GRPCMethodDescriptor(
      name: "leave_group",
      path: "/group.Group/leave_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_add_member = GRPCMethodDescriptor(
      name: "workspace_add_member",
      path: "/group.Group/workspace_add_member",
      type: GRPCCallType.unary
    )

    internal static let workspace_leave_group = GRPCMethodDescriptor(
      name: "workspace_leave_group",
      path: "/group.Group/workspace_leave_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_notify_deactive_member = GRPCMethodDescriptor(
      name: "workspace_notify_deactive_member",
      path: "/group.Group/workspace_notify_deactive_member",
      type: GRPCCallType.unary
    )

    internal static let workspace_member_forgot_password_in_group = GRPCMethodDescriptor(
      name: "workspace_member_forgot_password_in_group",
      path: "/group.Group/workspace_member_forgot_password_in_group",
      type: GRPCCallType.unary
    )

    internal static let workspace_member_reset_pincode_in_group = GRPCMethodDescriptor(
      name: "workspace_member_reset_pincode_in_group",
      path: "/group.Group/workspace_member_reset_pincode_in_group",
      type: GRPCCallType.unary
    )
  }
}
